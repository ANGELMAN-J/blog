<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deep Learning on Institute of Infomation Systems at HU-Berlin</title>
    <link>https://wisample.github.io/blog/tags/deep-learning/</link>
    <description>Recent content in Deep Learning on Institute of Infomation Systems at HU-Berlin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2017, Chair of Information System at HU-Berlin; all rights reserved.</copyright>
    <lastBuildDate>Thu, 01 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wisample.github.io/blog/tags/deep-learning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Neural Network Fundamentals II</title>
      <link>https://wisample.github.io/blog/research/seminar/group1/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wisample.github.io/blog/research/seminar/group1/</guid>
      <description>A Gentle Introduction to Neural Network Fundamentals  Implementation of the NN from scratch Let&amp;rsquo;s try to reimlement such a structure using Python. The crutial elements are:
 layers nodes weights between them activation function  
 import numpy as np def sigmoid(x): return 1 / (1 + np.exp(-x)) import matplotlib.pyplot as plt # Draw this function x = np.linspace(-10, 10, 100) plt.plot(x, sigmoid(x)) plt.show()  import numpy as np def sigmoid(x): return 1 / (1 + np.</description>
    </item>
    
    <item>
      <title>Neural Network Fundamentals</title>
      <link>https://wisample.github.io/blog/research/seminar/nn_funds_draft/</link>
      <pubDate>Tue, 30 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wisample.github.io/blog/research/seminar/nn_funds_draft/</guid>
      <description>A Gentle Introduction to Neural Network Fundamentals 
Imagine the following problem: There are handwritten numbers that you want computer to correctly clasify. It would be an easy task for a person but an extremely complicated one for a machine, especially, if you want to use some traditional prediction model, like linear regression. Even though the computer is faster than the human brain in numeric computations, the brain far outperforms the computer in some tasks.</description>
    </item>
    
    <item>
      <title>A Static Jupyter Notebook Example</title>
      <link>https://wisample.github.io/blog/research/seminar/staticjupyter_example_post/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wisample.github.io/blog/research/seminar/staticjupyter_example_post/</guid>
      <description>This is an example of a jupyter notebook to give you an idea of how your blog post could look like.
Python Analysis I # %load std_ipython_import.txt import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns import pymc3 as pm  Model # Using the Theano @as_op decorator with a custom function to calculate the threshold probabilities. # Theano cannot compute a gradient for these custom functions, so it is not possible to use # gradient based samplers in PyMC3.</description>
    </item>
    
    <item>
      <title>A dynamic Jupyter Notebook Example</title>
      <link>https://wisample.github.io/blog/research/seminar/dynamicjupyter_example_post/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wisample.github.io/blog/research/seminar/dynamicjupyter_example_post/</guid>
      <description>This is an example of a jupyter notebook to give you an idea of how your blog post could look like.
This is an example of a jupyter notebook to give you an idea of how your blog post could look like.  here:
{}</description>
    </item>
    
  </channel>
</rss>